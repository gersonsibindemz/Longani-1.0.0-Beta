// This file is auto-generated by Supabase CLI. Do not edit manually.
// It provides TypeScript types for your database schema, ensuring type safety.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      audio_files: {
        Row: {
          created_at: string
          duration_seconds: number
          file_size_bytes: number
          id: string
          is_favorite: boolean
          name: string
          storage_path: string
          user_id: string
        }
        Insert: {
          created_at?: string
          duration_seconds?: number
          file_size_bytes?: number
          id?: string
          is_favorite?: boolean
          name: string
          storage_path: string
          user_id: string
        }
        Update: {
          created_at?: string
          duration_seconds?: number
          file_size_bytes?: number
          id?: string
          is_favorite?: boolean
          name?: string
          storage_path?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "audio_files_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
      profiles: {
        Row: {
          created_at: string
          device_id: string | null
          id: string
          name: string
          photo_url: string | null
          plan: Database["public"]["Enums"]["plan_type"]
          preferences: Json
          team_id: string | null
        }
        Insert: {
          created_at?: string
          device_id?: string | null
          id: string
          name: string
          photo_url?: string | null
          plan?: Database["public"]["Enums"]["plan_type"]
          preferences?: Json
          team_id?: string | null
        }
        Update: {
          created_at?: string
          device_id?: string | null
          id?: string
          name?: string
          photo_url?: string | null
          plan?: Database["public"]["Enums"]["plan_type"]
          preferences?: Json
          team_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "profiles_id_fkey"
            columns: ["id"]
            isOneToOne: true
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "profiles_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
        ]
      }
      teams: {
        Row: {
          created_at: string
          id: string
          name: string
          owner_id: string
        }
        Insert: {
          created_at?: string
          id?: string
          name: string
          owner_id: string
        }
        Update: {
          created_at?: string
          id?: string
          name?: string
          owner_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "teams_owner_id_fkey"
            columns: ["owner_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
      transcriptions: {
        Row: {
          audio_id: string | null
          cleaned_transcript: string | null
          created_at: string
          filename: string
          id: string
          is_favorite: boolean
          original_language: string | null
          raw_transcript: string | null
          refined_content_type: string | null
          refined_output_format: string | null
          refined_transcript: string | null
          shared_by_name: string | null
          team_id: string | null
          user_id: string
        }
        Insert: {
          audio_id?: string | null
          cleaned_transcript?: string | null
          created_at?: string
          filename: string
          id?: string
          is_favorite?: boolean
          original_language?: string | null
          raw_transcript?: string | null
          refined_content_type?: string | null
          refined_output_format?: string | null
          refined_transcript?: string | null
          shared_by_name?: string | null
          team_id?: string | null
          user_id: string
        }
        Update: {
          audio_id?: string | null
          cleaned_transcript?: string | null
          created_at?: string
          filename?: string
          id?: string
          is_favorite?: boolean
          original_language?: string | null
          raw_transcript?: string | null
          refined_content_type?: string | null
          refined_output_format?: string | null
          refined_transcript?: string | null
          shared_by_name?: string | null
          team_id?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "transcriptions_audio_id_fkey"
            columns: ["audio_id"]
            isOneToOne: false
            referencedRelation: "audio_files"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "transcriptions_team_id_fkey"
            columns: ["team_id"]
            isOneToOne: false
            referencedRelation: "teams"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "transcriptions_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
      translations: {
        Row: {
          created_at: string
          id: string
          is_favorite: boolean
          original_filename: string
          target_language: string
          translated_text: string
          transcription_id: string
          user_id: string
        }
        Insert: {
          created_at?: string
          id?: string
          is_favorite?: boolean
          original_filename: string
          target_language: string
          translated_text: string
          transcription_id: string
          user_id: string
        }
        Update: {
          created_at?: string
          id?: string
          is_favorite?: boolean
          original_filename?: string
          target_language?: string
          translated_text?: string
          transcription_id?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "translations_transcription_id_fkey"
            columns: ["transcription_id"]
            isOneToOne: false
            referencedRelation: "transcriptions"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "translations_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      invite_user_to_team: {
        Args: {
          user_email: string
          team_id_to_add: string
        }
        Returns: {
          success: boolean
          message: string
        }
      }
    }
    Enums: {
      plan_type: "trial" | "basico" | "ideal" | "premium"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (Database["public"]["Tables"] & Database["public"]["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (Database["public"]["Tables"] &
      Database["public"]["Views"])
    ? (Database["public"]["Tables"] &
        Database["public"]["Views"])[PublicTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof Database["public"]["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof Database["public"]["Tables"]
    ? Database["public"]["Tables"][PublicTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof Database["public"]["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof Database["public"]["Tables"]
    ? Database["public"]["Tables"][PublicTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof Database["public"]["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof Database["public"]["Enums"]
    ? Database["public"]["Enums"][PublicEnumNameOrOptions]
    : never

// Custom App-specific types derived from the database schema
export type Profile = Tables<'profiles'>;
export type Plan = Enums<'plan_type'>;
export type Transcription = Tables<'transcriptions'>;
export type Translation = Tables<'translations'>;
export type AudioFile = Tables<'audio_files'>;
export type Team = Tables<'teams'>;

// This type is for local state management (e.g., recordings before upload)
export interface AudioRecording {
    id: string; // From the audio_files table
    name: string;
    date: number;
    audioBlob: Blob;
    isFavorite?: boolean;
}

export type TeamWithMembers = Team & { members: Profile[] };

export type ListItemType = (Transcription & { type: 'transcription' }) | (AudioFile & { type: 'audio' });

export type Theme = 'light' | 'dark';
export type PreferredLanguage = 'pt' | 'en';
export type RecordingQuality = 'standard' | 'high';
